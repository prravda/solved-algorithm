const solution = (w, h) => {
    let min = Math.min(w, h);
    let max = Math.max(w, h);

    // 최대공약수 계산 
    let gcd = 1;
    for (let i = 1; i <= min; i++) {
        if (min % i === 0 && max % i === 0) {
            gcd = i;
        }
    }

    // 사용할 수 없는 사각형의 갯수는 w + h - w 와 h 의 최대공약수
    return (w * h) - (w + h - gcd);
};


/**
 * 가로, 세로 방향과 평행하게 1cm / 1cm 를 잘라 사용할 수 있는 만큼만 사용한다는 게 무슨 말일까? 
 * 좌표평면으로 두고 일차방정식의 해가 해당 좌표평면 범위안에 존재하는지를 생각해보기로 했다. 
 * 
 * 좌표평면으로 풀었으나, 해당 계산 방법은 컴퓨터 기준으로 아주 미세한 오차가 발생하여 6번 테스트케이스를 통과하지 못 한다.
 * 다른 방법을 찾아보도록 하자.
 * 
 * https://bit.ly/3pVeb9N
 * 사실상 그냥 다 깔아놓고 규칙을 찾아보다가 최대공약수, 최소공배수가 얻어걸린 거 같다. 
 * 위의 링크는 내가 깔아놓고 풀 때 썼던 거고, 그려보면서 그냥 규칙추론을 하기 바빴던 거 같다.
 * 결정적으로... "왜 최대공약수인지, 왜 최소공배수인지" 는 논리적으로 설명할 수 없었다. 그래서 이번엔 좀 아쉽다.
 */